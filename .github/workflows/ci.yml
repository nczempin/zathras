name: CI

on:
  push:
    branches: [ main, dev, develop, 'feature/**', 'rebuild-v0.1.0' ]
  pull_request:
    branches: [ main, dev, develop ]

jobs:
  perft-validation:
    name: Build and Extended Perft Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cppcheck

    - name: Check case sensitivity
      run: |
        chmod +x scripts/check_case_sensitivity.sh
        ./scripts/check_case_sensitivity.sh

    - name: Run linting
      run: |
        echo "Running C++ linting checks..."
        make lint-cppcheck
      continue-on-error: true  # Don't fail the build on linting warnings for now

    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          build/
          zathras
        key: ubuntu-build-${{ hashFiles('**/*.cpp', '**/*.h', 'Makefile') }}
        restore-keys: |
          ubuntu-build-

    - name: Build
      run: |
        make clean
        make

    - name: Test basic functionality
      run: |
        echo "Testing basic UCI protocol..."
        echo -e "uci\nquit" | timeout 10s ./zathras > /dev/null

    - name: Test divide command
      run: |
        echo "=== Testing DIVIDE command (move breakdown analysis) ==="
        echo "The divide command should show perft count for each legal move"
        echo ""
        
        # Test divide at depth 2 for starting position
        echo "Test 1: Checking divide command output format and total..."
        divide_output=$(echo -e "uci\nposition startpos\ndivide 2\nquit" | timeout 30s ./zathras)
        
        # Check if divide header is present
        if echo "$divide_output" | grep -q "Divide .* result:"; then
          echo "✅ Divide command header found"
        else
          echo "❌ Divide command header missing"
          exit 1
        fi
        
        # Check if individual moves are listed (e.g., a2a3: count)
        move_count=$(echo "$divide_output" | grep -E "^[a-h][1-8][a-h][1-8].*:" | wc -l)
        if [ "$move_count" -eq 20 ]; then
          echo "✅ Divide lists all 20 legal moves with counts"
        else
          echo "❌ Expected 20 moves, found $move_count"
          exit 1
        fi
        
        # Check total
        divide_total=$(echo "$divide_output" | grep "Nodes searched:" | awk '{print $3}')
        if [ "$divide_total" != "400" ]; then
          echo "❌ Divide total was $divide_total, expected 400"
          exit 1
        else
          echo "✅ Divide total correct: $divide_total (Nodes searched)"
        fi
        
        echo ""
        echo "Test 2: Simple position (King vs King)..."
        # Show a sample of the output for verification
        echo -e "uci\nposition fen 8/8/8/4k3/8/8/8/4K3 w - - 0 1\ndivide 1\nquit" | timeout 30s ./zathras | grep -A 10 "Divide .* result:" | head -10
        
        echo ""
        echo "✅ DIVIDE command working correctly - shows move-by-move perft breakdown"
        
    - name: Test divide command with promotions
      run: |
        echo "=== Testing DIVIDE command with promotion positions ==="
        
        # Test divide with a promotion position
        echo "Testing divide on promotion position..."
        divide_promo_output=$(echo -e "uci\nposition fen 4k3/P7/8/8/8/8/8/4K3 w - - 0 1\ndivide 1\nquit" | timeout 30s ./zathras)
        
        # Count promotion moves (should show 4 moves for the pawn: a7a8q, a7a8r, a7a8b, a7a8n)
        promo_move_count=$(echo "$divide_promo_output" | grep -E "^a7a8[qrbn]:" | wc -l)
        if [ "$promo_move_count" -eq 4 ]; then
          echo "✅ Divide correctly shows 4 promotion moves"
        else
          echo "❌ Expected 4 promotion moves, found $promo_move_count"
          echo "Output:"
          echo "$divide_promo_output" | grep -E "^a7a8"
          exit 1
        fi
        
        # Verify each promotion move has the correct perft count
        # At depth 1, each promotion is just 1 move
        for piece in q r b n; do
          count=$(echo "$divide_promo_output" | grep "^a7a8${piece}:" | awk '{print $2}')
          if [ "$count" != "1" ]; then
            echo "❌ Promotion a7a8${piece} has incorrect count: $count (expected 1)"
            exit 1
          else
            echo "✅ Promotion a7a8${piece} correctly shows 1 move"
          fi
        done

    - name: Run extended perft suite
      run: |
        cat > extended_perft.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Running extended perft validation..."
        
        # Test perft depths 2-4 for starting position
        echo "=== Testing Starting Position ==="
        declare -A expected_results=(
          [2]=400  
          [3]=8902
          [4]=197281
        )
        
        failed_tests=0
        for depth in {2..4}; do
          echo "Testing starting position perft $depth (expected: ${expected_results[$depth]})..."
          result=$(echo -e "uci\nposition startpos\nperft $depth\nquit" | timeout 120s ./zathras | grep "Perft $depth result:" | awk '{print $4}')
          
          if [ "$result" != "${expected_results[$depth]}" ]; then
            echo "❌ Starting position perft $depth result was $result, expected ${expected_results[$depth]}"
            failed_tests=$((failed_tests + 1))
          else
            echo "✅ Starting position perft $depth: $result"
          fi
        done
        
        # Test additional standard perft positions
        echo "=== Testing Standard Perft Positions ==="
        
        # Kiwipete position - tests complex move generation
        echo "Testing Kiwipete position perft 3 (expected: 97862)..."
        kiwipete_result=$(echo -e "uci\nposition fen r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -\nperft 3\nquit" | timeout 60s ./zathras | grep "Perft 3 result:" | awk '{print $4}')
        
        if [ "$kiwipete_result" != "97862" ]; then
          echo "❌ Kiwipete position perft 3 result was $kiwipete_result, expected 97862"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ Kiwipete position perft 3: $kiwipete_result"
        fi
        
        # Position 4 - intensive promotion testing  
        echo "Testing Position 4 perft 3 (expected: 9467)..."
        pos4_result=$(echo -e "uci\nposition fen r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1\nperft 3\nquit" | timeout 60s ./zathras | grep "Perft 3 result:" | awk '{print $4}')
        
        if [ "$pos4_result" != "9467" ]; then
          echo "❌ Position 4 perft 3 result was $pos4_result, expected 9467"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ Position 4 perft 3: $pos4_result"
        fi
        
        # Also test Position 4 at depth 4 for more comprehensive validation
        echo "Testing Position 4 perft 4 (expected: 422333)..."
        pos4_d4_result=$(echo -e "uci\nposition fen r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1\nperft 4\nquit" | timeout 120s ./zathras | grep "Perft 4 result:" | awk '{print $4}')
        
        if [ "$pos4_d4_result" != "422333" ]; then
          echo "❌ Position 4 perft 4 result was $pos4_d4_result, expected 422333"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ Position 4 perft 4: $pos4_d4_result"
        fi
        
        # Position 5 - promotion at ply 1 (critical for under-promotion validation)
        echo "Testing Position 5 perft 3 (expected: 62379)..."
        pos5_result=$(echo -e "uci\nposition fen rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8\nperft 3\nquit" | timeout 90s ./zathras | grep "Perft 3 result:" | awk '{print $4}')
        
        if [ "$pos5_result" != "62379" ]; then
          echo "❌ Position 5 perft 3 result was $pos5_result, expected 62379"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ Position 5 perft 3: $pos5_result"
        fi
        
        # Simple promotion tests
        echo ""
        echo "=== Critical Targeted Tests ==="
        
        # Simple under-promotion test (white pawn on 7th rank)
        echo "Testing simple promotion perft 2 (expected: 41)..."
        simple_promo_result=$(echo -e "uci\nposition fen 4k3/P7/8/8/8/8/8/4K3 w - - 0 1\nperft 2\nquit" | timeout 30s ./zathras | grep "Perft 2 result:" | awk '{print $4}')
        
        if [ "$simple_promo_result" != "41" ]; then
          echo "❌ Simple promotion perft 2 result was $simple_promo_result, expected 41"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ Simple promotion perft 2: $simple_promo_result"
        fi
        
        # Black pawn promotion test
        echo "Testing black pawn promotion perft 2 (expected: 41)..."
        black_promo_result=$(echo -e "uci\nposition fen 4k3/8/8/8/8/8/p7/4K3 b - - 0 1\nperft 2\nquit" | timeout 30s ./zathras | grep "Perft 2 result:" | awk '{print $4}')
        
        if [ "$black_promo_result" != "41" ]; then
          echo "❌ Black pawn promotion perft 2 result was $black_promo_result, expected 41"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ Black pawn promotion perft 2: $black_promo_result"
        fi
        
        # Edge file promotion tests (to catch pregenerated move table bug)
        echo ""
        echo "=== Edge File Promotion Tests (a-file and h-file) ==="
        
        # White pawn on a-file
        echo "Testing white pawn on a7 perft 1 (expected: 9)..."
        a_file_white=$(echo -e "uci\nposition fen 4k3/P7/8/8/8/8/8/4K3 w - - 0 1\nperft 1\nquit" | timeout 30s ./zathras | grep "Perft 1 result:" | awk '{print $4}')
        
        if [ "$a_file_white" != "9" ]; then
          echo "❌ White pawn on a7 perft 1 result was $a_file_white, expected 9"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ White pawn on a7 perft 1: $a_file_white"
        fi
        
        # Black pawn on a-file  
        echo "Testing black pawn on a2 perft 1 (expected: 9)..."
        a_file_black=$(echo -e "uci\nposition fen 4k3/8/8/8/8/8/p7/4K3 b - - 0 1\nperft 1\nquit" | timeout 30s ./zathras | grep "Perft 1 result:" | awk '{print $4}')
        
        if [ "$a_file_black" != "9" ]; then
          echo "❌ Black pawn on a2 perft 1 result was $a_file_black, expected 9"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ Black pawn on a2 perft 1: $a_file_black"
        fi
        
        # White pawn on h-file
        echo "Testing white pawn on h7 perft 1 (expected: 9)..."
        h_file_white=$(echo -e "uci\nposition fen 4k3/7P/8/8/8/8/8/4K3 w - - 0 1\nperft 1\nquit" | timeout 30s ./zathras | grep "Perft 1 result:" | awk '{print $4}')
        
        if [ "$h_file_white" != "9" ]; then
          echo "❌ White pawn on h7 perft 1 result was $h_file_white, expected 9"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ White pawn on h7 perft 1: $h_file_white"
        fi
        
        # Black pawn on h-file
        echo "Testing black pawn on h2 perft 1 (expected: 9)..."
        h_file_black=$(echo -e "uci\nposition fen 4k3/8/8/8/8/8/7p/4K3 b - - 0 1\nperft 1\nquit" | timeout 30s ./zathras | grep "Perft 1 result:" | awk '{print $4}')
        
        if [ "$h_file_black" != "9" ]; then
          echo "❌ Black pawn on h2 perft 1 result was $h_file_black, expected 9"
          failed_tests=$((failed_tests + 1))
        else
          echo "✅ Black pawn on h2 perft 1: $h_file_black"
        fi
        
        echo ""
        echo "=== PERFT TEST SUMMARY ==="
        if [ $failed_tests -eq 0 ]; then
          echo "✅ All perft tests passed! ($((failed_tests)) failures)"
        else
          echo "❌ $failed_tests perft test(s) failed"
          echo "Move generation accuracy needs investigation"
        fi
        
        # Exit with failure if any tests failed
        exit $failed_tests
        EOF
        chmod +x extended_perft.sh
        ./extended_perft.sh

    - name: Performance benchmark
      run: |
        echo "Running performance benchmark..."
        echo -e "uci\nposition startpos\nperft 4\nquit" | ./zathras | grep "time:"

    - name: Upload build artifacts on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-artifacts
        path: |
          zathras
          build/
          *.log